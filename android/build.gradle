apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'maven-publish'

import com.android.build.gradle.tasks.MergeResources

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        google()
		jcenter()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:${androidplugin}"
    }
}

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "0.0.3"
        consumerProguardFiles 'proguard-rules.pro'
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "source"
}

publishing {
    publications {
        android(MavenPublication) {
            groupId 'com.msopentech.thali.toronionproxy.android'
            artifactId 'android'
            version '0.0.3'
            artifact(sourceJar)
            artifact("$buildDir/outputs/aar/android-release.aar")
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    if(it.group != null && (it.name != null || "unspecified".equals(it.name)) && it.version != null)
                    {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}


configurations {
	tor
}

dependencies {
    implementation project(':universal')
    implementation 'net.freehaven.tor.control:jtorctl:0.2'
    implementation 'org.slf4j:slf4j-api:1.7.25'
    implementation 'org.slf4j:slf4j-android:1.7.25'
    implementation 'com.android.support:appcompat-v7:28.0.0'
	tor 'org.briarproject:obfs4proxy-android:0.0.11-2@zip'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation project(':android_tor_installer')
    androidTestImplementation 'org.torproject:tor-android-binary:0.3.5.8-rc-v2'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}

repositories {
    mavenLocal()
    mavenCentral()
    google()
	jcenter()
    maven { url "https://raw.githubusercontent.com/guardianproject/gpmaven/master" }
}

def torBinariesDir = 'src/main/jniLibs'

task cleanTorBinaries {
	delete torBinariesDir
}

clean.dependsOn cleanTorBinaries

task unpackTorBinaries {
	doLast {
		configurations.tor.each {dep->
			FileTree mainTree = zipTree(dep)
			mainTree.matching {
				include "**/*_pie.zip"
			}.each { f->
				def baseDirName = f.name.replace("obfs4proxy_", "").replace("_pie.zip", "").replaceFirst(/arm64$/, 'arm64-v8a').replaceFirst(/arm$/, 'armeabi-v7a')
				copy {
					from zipTree(f)
					into "$torBinariesDir/$baseDirName"
					rename { filename ->
						filename.replace 'obfs4proxy', 'libObfs4proxy.so'
					}
				} 
			}
		} 
   }
	dependsOn cleanTorBinaries
}

tasks.withType(MergeResources) {
	inputs.dir torBinariesDir
	dependsOn unpackTorBinaries
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

artifacts {
    archives sourcesJar
}
